

Er lijkt in /home/martin/Documents/repos/battery-MONEE/RoboRobo/src/ext/PerceptronBehaviorControlArchitecture.cpp iets te staan wat iets doet



Batterij heeft maximale waarde
elke tijdstap gaat er 1 dingetje af
als de batterij leeg is, wordt je een ei

er is een oplaadpunt in de ruimte
zolang je binnen de straal van het oplaadpunt staat, wordt de batterij helemaal vol.



Hoe werken de scriptjes:
analyse pipelinev (scripts op github)
<dirname>/datumaanelkaar___12312/
    .cout
    .log
    .output

roep aan met `analyse.sh <dirname>`



lichtje




Dan gaan ze dus niet

in genoom
 - na hoeveel tijdstappen 'ie moet opladen.
 (- hoe lang 'ie  oplaad)

instellingen:
 - hoeveel stroom per tijdsstap / stroom na opladen
 - hoe lang 'ie moet opladen

parameters:
 - hoe vol 'ie is

counters:
 - chargingtime
 - depletiontime




2016-12-06
Bij het direct casten van het DNA gebeurt er geen zak omdat evolutie te langzaam effect heeft. Na vele iteraties zijn er waarden tussen -8 en +4.
Nieuwe idee is om het DNA eerst keer 10 te doen.
Maar eerst ga ik er voor zorgen dat 'ie instellingen kan lezen.


Shit die uit settings moet komen:
SimpleShellsAgentWorldModel._depletionTimeFactor
SimpleShellsControlArchitecture._chargedBatteryLevel
SimpleShellsControlArchitecture._fixedChargingTime




2016-12-14
I'm just ignoring gSelectionPressure



created by and mutating the parent weights using
gaussian perturbation with a single, fixed mutation step size
Ïƒ = 1. This sin

experiments
# geval zonder batterij

Fixed settings:
# Effectively multiplying the standard deviation of the mutation Gaussian by 10
gDepletionTimeFactor = 10 % 10 or 5% of the lifetime of the robot
puckcolors = 1
gMaxLifetimeGathering = 2000
gMaxLifetimeMating = 200


# Total time standing charging in ideal case should be the same in all cases
# totalWaste = an eighth of the gMaxLifetimeGathering

gather / battery = gather / (perc * gather) = 1 / perc

gather / (BatteryLevel + ChargingTime) * ChargingTime = totalWaste
gather * ChargingTime = totalWaste * (BatteryLevel + ChargingTime)
gather * ChargingTime = totalWaste * BatteryLevel + totalWaste * ChargingTime
gather * ChargingTime - totalWaste * ChargingTime = totalWaste * BatteryLevel
(gather - totalWaste) * ChargingTime = totalWaste * BatteryLevel
ChargingTime = totalWaste * BatteryLevel / (gather - totalWaste)
ChargingTime = chargeFact * batteryFact * gather ^ 2 / (gather - chargeFact * gather)
ChargingTime = chargeFact * batteryFact * gather / (1 - chargeFact)

Changing settings:
# 10%   20%      50%    100%  of life time
# 200   400     1000    2000
gChargedBatteryLevel = 500
#  29    57      143     286
gFixedChargingTime = 300



2016-12-15
Data die we nodig hebben
inseminations
#pucks collected




2016-12-16
Ik wil weten:
#descendants | depletion time
Dus ik moet eerst per robot weten hoeveel descendants die had en wat z'n depletion time was.

2016-12-18
En dus ook #descendants | pucks
Dus ik wil weten:
per robot hoeveel descendants die had, wat z'n depletion time was EN hoeveel pucks 'ie heeft verzameld
Welke iteratie het is staat hier in de depletion logs:

[descendant] 98725 5101 5205
             ^^^^^
             hier


Hoeveel nakomelingen een stuk DNA heeft weet je door te kijken hoe vaak het op de volgende plek voor komt:

EggHatched: (1726; 175.643; 611.569); [(..)]; Winner: 159
                                                      ^^^
                                                      hier

Het aantal pucks dat verzamelt is, staat hier (met bijbehorend ID van genoom):
EggHatched: (1726; 175.643; 611.569); [[0, 0.25, 137], [0, 1.75, 159]]; (...)
                                                        ^        ^^^
                                                        hier     ID

De iteratie van een hatch staat hier:
EggHatched: (1726; 175.643; 611.569); [(..)]; Winner: 159
             ^^^^
             hier

De iteratie van een puckcollection staat hier:
PuckTaken: (747495;0;256;510)
            ^^^^^^
            hier


Because the robots change controllers asynchronously, the
definition of a population is not entirely straightforward. In
this case, we define a population as all the controllers that ran
to completion within a certain timeframe (intervals of 5000
time steps)


TODO dingen:
 - veel langere runs zijn om te kijken wat er met 2000 gebeurt
 - extra geval met depletion time 0 is ofzo, zodat ze gewoon wel gaan lopen maakt niet uit wat er gebeurt
 - depletion time uitreken rekeninghoudend met dat ze met een volle batterij beginnen


2017-01-02

Iteration, id of the previous genome of this egg, number of pucks collected, distance travelled
[gathered] 692248 35579 4 791.7
           ^^^^^^ ^^^^^ ^ ^^^^^
           itera. preID N distance

Iteration, id of the winning genome of this egg, id of the new genome
[descendant] 692248 35579 35670
             ^^^^^^ ^^^^^ ^^^^^
             itera. WinID NewID

Save everything per id, in a list because it's faster.
list[id] = [(depletion_time, )ndescendants, npucks]
per robot hoeveel descendants die had, wat z'n depletion time was EN hoeveel pucks 'ie heeft verzameld EENNNN iets met iteratie

depletion time: van [descendant]

Algorithm:
    for (new_id, dep_time, win_id, npucks) in depletion_log:
        list[entry['id']] = [entry['depletion_time'], 0, 0]
        temp = list[entry['winner_id']]
        temp[1] += 1
        temp[2] = entry['pucks_collected']

2017-01-04
Charing time (compensated for starting with a full battery):

batteryFact * lifetime + ncharges * (batteryFact * lifetime + chargingTime) = lifetime
wastedTime = chargeFact * lifetime = ncharges * chargingTime

ncharges = chargeFact * lifetime / chargingTime

batteryFact * lifetime + chargeFact * lifetime / chargingTime * (batteryFact * lifetime + chargingTime) = lifetime
chargeFact * lifetime / chargingTime * (batteryFact * lifetime + chargingTime) = lifetime - batteryFact * lifetime
chargeFact * lifetime / chargingTime * (batteryFact * lifetime + chargingTime) = (1 - batteryFact) * lifetime
(batteryFact * lifetime + chargingTime) / chargingTime = (1 - batteryFact) * lifetime / chargeFact / lifetime
(batteryFact * lifetime + chargingTime) / chargingTime = (1 - batteryFact) / chargeFact
batteryFact * lifetime / chargingTime + chargingTime / chargingTime = (1 - batteryFact) / chargeFact
batteryFact * lifetime / chargingTime + 1 = (1 - batteryFact) / chargeFact
batteryFact * lifetime / chargingTime = (1 - batteryFact) / chargeFact - 1
chargingTime = batteryFact * lifetime / ((1 - batteryFact) / chargeFact - 1)




Algoritme was niet helemaal goed, iteration miste ergens.
Algorithm:
    initialize(list)
    for (new_id, iteration, dep_time, win_id, npucks) in depletion_log:
        list[new_id] = [iteration, dep_time, 0, 0]
        list[winner_id][2] += 1
        # Nope! temp[3] = entry['pucks_collected']


2017-01-05
Voor Fishers test moet je combined individuals gebruiken
